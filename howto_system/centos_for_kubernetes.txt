###########################################################################
# Network Setting
vi /etc/sysconfig/network-scripts/ifcfg-eth0
BOOTPROTO=static
ONBOOT=yes
IPADDR=192.168.0.100
GATEWAY=192.168.0.1
NETMASK=255.255.255.0
DNS1=168.126.63.1
DNS2=8.8.8.8

###########################################################################
# Setup Basic
# Bash 자동완성 -----------------------------------------------------------
root# yum install -y epel-release
root# yum install -y bash-completion-extras

* Python & Powerline Bash ---------------------------------------------------------------
root# sudo yum install -y epel-release
root# sudo yum install wget sysstat lrzsz lsof bzip2 unzip iftop -y \
   && sudo yum install python3 python3-pip git fontconfig -y
root# sudo ln -s /usr/bin/pip3 /usr/bin/pip \
   && sudo ln -s /usr/bin/python3 /usr/bin/python \
   && sudo pip install --upgrade pip \
   && sudo pip install git+git://github.com/Lokaltog/powerline
root# wget https://github.com/Lokaltog/powerline/raw/develop/font/PowerlineSymbols.otf \
   && wget https://github.com/Lokaltog/powerline/raw/develop/font/10-powerline-symbols.conf \
   && sudo mv PowerlineSymbols.otf /usr/share/fonts/ \
   && sudo mv 10-powerline-symbols.conf /etc/fonts/conf.d/ \
   && fc-cache -vf /usr/share/fonts/

root# cat >>/etc/bashrc<<EOF

export TERM="screen-256color"
if [ -f `which powerline-daemon` ]; then
    powerline-daemon -q
    POWERLINE_BASH_CONTINUATION=1
    POWERLINE_BASH_SELECT=1
fi
if [ -f /usr/local/lib/python3.6/site-packages/powerline/bindings/bash/powerline.sh ]; then
    source /usr/local/lib/python3.6/site-packages/powerline/bindings/bash/powerline.sh
fi
EOF


# NTFS Driver -------------------------------------------------------------
root# yum install -y ntfs-3g
user:~$ sudo mount /dev/sdc /mnt/usb

# Firewall Stop -----------------------------------------------------------
root# systemctl stop firewalld
root# systemctl disable firewalld

# Selinux Off -------------------------------------------------------------
root# sed -i 's/^SELINUX=enforcing$/SELINUX=disabled/' /etc/selinux/config

###########################################################################
* Vi Editor (~/.vimrc)
root# yum install -y vim
root# cat >>/etc/vimrc<<EOF

set number
set tabstop=4
set shiftwidth=4
set showmatch
set title
set hlsearch
set fileencodings=utf-8,euc-kr
set ruler
set title
set statusline=\ %<%l:%v\ [%P]%=%a\ %h%m%r\ %F\

syntax on
EOF

# Powerline vim -----------------------------------------------------------
root# cat >>/etc/vimrc<<EOF

set rtp+=/usr/local/lib/python3.6/site-packages/powerline/bindings/vim/
set laststatus=2
set t_Co=256
EOF

###########################################################################
# Install git2 new version
user:~$ sudo yum remove git*
user:~$ sudo yum -y install  https://centos7.iuscommunity.org/ius-release.rpm
user:~$ sudo yum -y install  git2u-all
user:~$ git --version

###########################################################################
# Install ksonnet
user:~$ sudo yum install -y wget
user:~$ wget https://github.com/ksonnet/ksonnet/releases/download/v0.13.1/ks_0.13.1_linux_amd64.tar.gz
user:~$ tar xfvz ks_0.13.1_linux_amd64.tar.gz
user:~$ sudo mv ks_0.13.1_linux_amd64 /opt/
user:~$ sudo ln -s /opt/ks_0.13.1_linux_amd64/ks /usr/local/bin/ks

###########################################################################
# Install helm
user:~$ wget https://get.helm.sh/helm-v3.0.2-linux-amd64.tar.gz
user:~$ tar xfvz helm-v3.0.2-linux-amd64.tar.gz
user:~$ sudo mv linux-amd64/ /opt/helm
user:~$ sudo ln -s /opt/helm/helm /usr/local/bin/helm

###########################################################################
# Install Sublime Text
user:~$ sudo rpm -v --import https://download.sublimetext.com/sublimehq-rpm-pub.gpg
user:~$ sudo yum install yum-utils
user:~$ sudo yum-config-manager --add-repo https://download.sublimetext.com/rpm/stable/x86_64/sublime-text.repo
user:~$ sudo yum install sublime-text

###########################################################################
# X11 Forwarding
root# yum install -y xorg-x11-server-Xorg xorg-x11-xauth xorg-x11-apps
root# vim /etc/ssh/sshd_config
      X11Forwarding yes
      X11DisplayOffset 10
      X11UseLocalhost no
      
      PrintMotd no
      PrintLastLog yes
      TCPKeepAlive yes
      UseLogin no
root# systemctl restart sshd

# At Windows
1. Xming Install
2. putty
   * SSH > X11 > Enable X11 forwarding (check)
   * X display location : localhost:0.0

###########################################################################
# Install VirtualBox Guest Additions on CentOS 7
root# yum groupinstall -y "Development Tools"
root# yum install -y kernel-devel
root# yum install -y epel-release
root# yum install -y dkms
root# mount /dev/cdrom /mnt/VBoxLinuxAdditions
root# /mnt/VBoxLinuxAdditions.run --nox11

###########################################################################
# Install Docker & Compose on CentOS 8
# kubeflow 1.2 == docker-ce-18.09.8 + Kubernetes 1.16 (https://www.kubeflow.org/docs/started/k8s/overview/)
user:~$ sudo yum install -y yum-utils device-mapper-persistent-data lvm2
user:~$ sudo yum-config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo
user:~$ sudo yum install -y docker-ce docker-ce-cli containerd.io
user:~$ sudo usermod -aG docker $(whoami)
user:~$ sudo systemctl enable docker.service
user:~$ sudo systemctl start docker.service
user:~$ sudo yum install gcc glibc glibc-common gd gd-devel python3-devel -y
user:~$ sudo pip3 install setuptools_rust --upgrade pip
user:~$ sudo pip3 install docker-compose
user:~$ docker-compose version

###########################################################################
# Install Nvidia-Docker on CentOS 7
* nouveau driver off ------------------------------------------------------
root:~$ yum update
root:~$ yum install -y kernel kernel-devel gcc make dkms
root:~$ echo 'blacklist nouveau' >> /etc/modprobe.d/blacklist.conf
root:~$ rpm -e xorg-x11-drivers xorg-x11-drv-nouveau
root:~$ vi /etc/default/grub
GRUB_CMDLINE_LINUX="~~ rd.driver.blacklist=nouveau"

> BIOS USER run this
root:~$ grub2-mkconfig -o /boot/grub2/grub.cfg
> UEFI USER run this
root:~$ grub2-mkconfig -o /boot/efi/EFI/centos/grub.cfg

* Reboot and check nouveau driver status ---------------------------------
root:~$ reboot
root:~$ lsmod | grep nouveau

* Download Nvidia Driver & Install ----------------------------------------
Site: https://www.nvidia.co.kr/Download/index.aspx?lang=kr
root:~$ wget http://kr.download.nvidia.com/tesla/440.64.00/NVIDIA-Linux-x86_64-440.64.00.run
root:~$ sudo sh NVIDIA-Linux-x86_64-440.64.00.run

* Install Nvidia-Docker2 --------------------------------------------------
root:~$ distribution=$(. /etc/os-release;echo $ID$VERSION_ID)
root:~$ curl -s -L https://nvidia.github.io/nvidia-docker/$distribution/nvidia-docker.repo | sudo tee /etc/yum.repos.d/nvidia-docker.repo
root:~$ yum install nvidia-docker2

###########################################################################
# Install Kubernetes
# Master & Node HOST File Setting -----------------------------------------
root# cat >> /etc/hosts<<EOF
192.168.0.24 vmaster
192.168.0.25 vnode1
192.168.0.26 vnode2
192.168.0.27 vnode3
192.168.0.28 vnode4
192.168.0.29 vnode5
EOF

# Disable swap ------------------------------------------------------------
root# sed -i '/swap/d' /etc/fstab
root# swapoff -a

# Update sysctl settings for Kubernetes networking ------------------------
root# cat >>/etc/sysctl.d/kubernetes.conf<<EOF
net.bridge.bridge-nf-call-ip6tables = 1
net.bridge.bridge-nf-call-iptables = 1
EOF
root# sysctl --system


# Add Kubernetes Yum Repository -------------------------------------------
root# cat <<EOF > /etc/yum.repos.d/kubernetes.repo
[kubernetes]
name=Kubernetes
baseurl=https://packages.cloud.google.com/yum/repos/kubernetes-el7-x86_64
enabled=1
gpgcheck=1
repo_gpgcheck=1
gpgkey=https://packages.cloud.google.com/yum/doc/yum-key.gpg https://packages.cloud.google.com/yum/doc/rpm-package-key.gpg
EOF
root# yum install -y kubelet kubeadm kubectl


# Setup daemon
root# cat > /etc/docker/daemon.json <<EOF
{
  "exec-opts": ["native.cgroupdriver=systemd"],
  "log-driver": "json-file",
  "log-opts": {
    "max-size": "100m"
  },
  "storage-driver": "overlay2",
  "storage-opts": [
    "overlay2.override_kernel_check=true"
  ]
}
EOF
root# mkdir -p /etc/systemd/system/docker.service.d

# Start Docker
root# systemctl daemon-reload \
   && systemctl enable kubelet \
   && systemctl start kubelet


###########################################################################
# Setting Up Kubernetes Master
# Initialize Kubernetes Cluster -------------------------------------------
rsnet# sudo kubeadm init --pod-network-cidr=10.244.0.0/16 --apiserver-advertise-address=192.168.0.24

# Setting Up For Master ---------------------------------------------------
user:~$ mkdir ~/.kube \
     && sudo cp -i /etc/kubernetes/admin.conf ~/.kube/config \
     && sudo chown -R $(id -u):$(id -g) ~/.kube \
     && kubectl apply -f https://docs.projectcalico.org/v3.17/manifests/calico.yaml  \
     && watch kubectl get all --all-namespaces -o wide
user:~$ kubectl taint nodes --all node-role.kubernetes.io/master-

# Cluster join command ----------------------------------------------------
rsnet# kubeadm token create --print-join-command
