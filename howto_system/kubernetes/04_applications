#########################################################################################
###                                    PostgreSQL                                     ###
#########################################################################################
※ site : https://github.com/bitnami/charts/blob/master/bitnami/postgresql/README.md

* Install elasticsearch -----------------------------------------------------------------
user:~$ wget https://raw.githubusercontent.com/bitnami/charts/master/bitnami/postgresql/values.yaml \
     && mv values.yaml postgresql_values.yaml
user:~$ helm repo add bitnami https://charts.bitnami.com/bitnami \
     && helm repo update \
     && helm install postgresql bitnami/postgresql -f postgresql_values.yaml --namespace postgresql --create-namespace

* Verifying the installation ------------------------------------------------------------
user:~$ watch kubectl get all -n postgresql

* SSH-Tunneling at client ---------------------------------------------------------------
user:~$ kubectl port-forward --namespace postgresql svc/postgresql 5432:5432 &
user:~$ ssh -f -N rsnet@vmaster -L5432:localhost:5432

* Expose port for dev -------------------------------------------------------------------
user:~$ cat <<EOF | kubectl apply -f -
apiVersion: v1
kind: Service
metadata:
  name: postgresql-external
  namespace: postgresql
spec:
  type: LoadBalancer
  ports:
    - port: 5432
      targetPort: 5432
      protocol: TCP
  selector:
    app.kubernetes.io/instance: postgresql
    app.kubernetes.io/name: postgresql
EOF



#########################################################################################
###                                      MongoDB                                      ###
#########################################################################################
※ site : https://artifacthub.io/packages/helm/bitnami/mongodb

* Install  ------------------------------------------------------------------------------
user:~$ helm repo add bitnami https://charts.bitnami.com/bitnami \
     && helm repo update
user:~$ helm install mongodb bitnami/mongodb --namespace mongodb --create-namespace

* Verifying the installation ------------------------------------------------------------
user:~$ watch kubectl get all -n mongodb



#########################################################################################
###                                   Elasticsearch                                   ###
#########################################################################################
※ site : https://www.elastic.co/guide/en/cloud-on-k8s/current/k8s-install-helm.html

* Install  ------------------------------------------------------------------------------
user:~$ helm repo add elastic https://helm.elastic.co \
     && helm repo update
user:~$ helm install elastic-operator elastic/eck-operator -n elastic-system --create-namespace


* Verifying the installation ------------------------------------------------------------
user:~$ watch kubectl get all -n elastic-system



#########################################################################################
###                                      Airflow                                      ###
#########################################################################################
※ site : https://airflow.apache.org/docs/helm-chart/stable/index.html

* Install  ------------------------------------------------------------------------------
user:~$ kubectl create namespace airflow
user:~$ helm repo add apache-airflow https://airflow.apache.org
user:~$ helm repo update
user:~$ helm show values apache-airflow/airflow
user:~$ helm install airflow apache-airflow/airflow --namespace airflow

※ Airflow UI : admin / admin
※ Postgres Connection : postgres / postgres
※ echo Fernet Key: $(kubectl get secret --namespace airflow airflow-fernet-key -o jsonpath="{.data.fernet-key}" | base64 --decode)

* Ingress -------------------------------------------------------------------------------
user:~$ cat > ingress.yaml << EOF
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: airflow-ingress
  namespace: airflow
  annotations:
    kubernetes.io/ingress.class: "nginx"
    nginx.ingress.kubernetes.io/ssl-passthrough: "true"
    nginx.ingress.kubernetes.io/backend-protocol: "HTTP"
spec:
  rules:
  - host: airflow.realstudy.net
    http:
      paths:
      - pathType: Prefix
        path: /
        backend:
          service:
            name: airflow-webserver
            port: 
              number: 8080
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: flower-ingress
  namespace: airflow
  annotations:
    kubernetes.io/ingress.class: "nginx"
    nginx.ingress.kubernetes.io/ssl-passthrough: "true"
    nginx.ingress.kubernetes.io/backend-protocol: "HTTP"
spec:
  rules:
  - host: flower.realstudy.net
    http:
      paths:
      - pathType: Prefix
        path: /
        backend:
          service:
            name: airflow-flower
            port: 
              number: 5555
EOF




