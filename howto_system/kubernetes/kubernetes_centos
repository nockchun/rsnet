#########################################################################################
###                                Target System Info                                 ###
#########################################################################################
OS: Centos 7
Kubernetes: V1.20
CRI: CRI-O v1.20
CNI plugin: Calico

#########################################################################################
###                                  Basic Settings                                   ###
#########################################################################################
* Network Setting -----------------------------------------------------------------------
vi /etc/sysconfig/network-scripts/ifcfg-enp0s3
BOOTPROTO=static
ONBOOT=yes
IPADDR=10.0.24.24
GATEWAY=10.0.24.1
NETMASK=255.255.255.0
DNS1=8.8.8.8
DNS2=168.126.63.1

* Repository Mirror Setting -------------------------------------------------------------
root# vi /etc/yum.repos.d/CentOS-Linux-BaseOS.repo
baseurl=http://mirror.kakao.com/centos/$releasever/BaseOS/$basearch/os/

root# vi /etc/yum.repos.d/CentOS-Linux-AppStream.repo
baseurl=http://mirror.kakao.com/centos/$releasever/AppStream/$basearch/os/

* Change Default Python Version On Linux ------------------------------------------------
root# update-alternatives --install /usr/bin/python python /usr/bin/python2 1
root# update-alternatives --install /usr/bin/python python /usr/bin/python3 2
root# update-alternatives --config python

* Bash Auto Completion ------------------------------------------------------------------
root# yum install -y epel-release \
   && yum install -y bash-completion-extras

* Python & Powerline Bash ---------------------------------------------------------------
root# yum install -y epel-release \
   && yum install wget sysstat lrzsz lsof bzip2 unzip iftop -y \
   && yum install python3 python3-pip git fontconfig -y
root# pip3 install --upgrade pip \
   && pip3 install git+git://github.com/Lokaltog/powerline
root# wget https://github.com/Lokaltog/powerline/raw/develop/font/PowerlineSymbols.otf \
   && wget https://github.com/Lokaltog/powerline/raw/develop/font/10-powerline-symbols.conf \
   && mv PowerlineSymbols.otf /usr/share/fonts/ \
   && mv 10-powerline-symbols.conf /etc/fonts/conf.d/ \
   && fc-cache -vf /usr/share/fonts/

root# cat >> /etc/bashrc << EOF

export TERM="screen-256color"
if [ -f `which powerline-daemon` ]; then
    powerline-daemon -q
    POWERLINE_BASH_CONTINUATION=1
    POWERLINE_BASH_SELECT=1
fi
if [ -f /usr/local/lib/python3.6/site-packages/powerline/bindings/bash/powerline.sh ]; then
    source /usr/local/lib/python3.6/site-packages/powerline/bindings/bash/powerline.sh
fi
EOF


* Vi Editor -----------------------------------------------------------------------------
root# yum install -y vim
root# cat >> /etc/vimrc << EOF

set number
set tabstop=4
set shiftwidth=4
set showmatch
set title
set hlsearch
set fileencodings=utf-8,euc-kr
set ruler
set title
set statusline=\ %<%l:%v\ [%P]%=%a\ %h%m%r\ %F\

syntax on
EOF

# Powerline vim -------------------------------------------------------------------------
root# cat >> /etc/vimrc << EOF

set rtp+=/usr/local/lib/python3.6/site-packages/powerline/bindings/vim/
set laststatus=2
set t_Co=256
EOF

# Git Version 2 -------------------------------------------------------------------------
user:~$ sudo rpm -Uvh http://opensource.wandisco.com/centos/7/git/x86_64/wandisco-git-release-7-2.noarch.rpm
user:~$ sudo yum install -y git

# Sublime Text 3 ------------------------------------------------------------------------
user:~$ sudo rpm -v --import https://download.sublimetext.com/sublimehq-rpm-pub.gpg
user:~$ sudo yum-config-manager --add-repo https://download.sublimetext.com/rpm/stable/x86_64/sublime-text.repo
user:~$ sudo yum install -y sublime-text

1. SideBarEnhanceinsments
    > site : https://github.com/titoBouzout/SideBarEnhancements
    > Sidebar에 대해 확장기능 플러그인.
2. SublimeCodeIntel
    > site : https://github.com/SublimeCodeIntel/SublimeCodeIntel
    > 소스코드에 intelligence 기능과 smart autocomplete 기능을 지원하는 플러그인.
    > Key For Linux:
        - Jump to definition = ``Super+Click``
        - Jump to definition = ``Control+Super+Alt+Up``
        - Go back = ``Control+Super+Alt+Left``
        - Manual CodeIntel = ``Control+Shift+space``
    > Key For Windows:
        - Jump to definition = ``Alt+Click``
        - Jump to definition = ``Control+Windows+Alt+Up``
        - Go back = ``Control+Windows+Alt+Left``
        - Manual CodeIntel = ``Control+Shift+space``
3. GitSavvy
    > git 사용을 도와주는 플러그인.
    > 기본 설정.
        - git config --global user.email "you@example.com"
        - git config --global user.name "Your Name"
4. materialize & soda
    > site : https://github.com/saadq/Materialize
    > UI 테마
    > setting
        "color_scheme": "Packages/Materialize/schemes/Material Monokai Soda.tmTheme",
        "theme": "Soda Dark 3.sublime-theme",
        "font_face": "D2Coding",
        "font_size": 13,
        "line_padding_bottom": 2,
        "line_padding_top": 2,
        "margin": 0,
        "material_theme_compact_panel": true,
        "material_theme_compact_sidebar": true,
        "material_theme_contrast_mode": true,
        "material_theme_small_statusbar": true,
        "material_theme_small_tab": true,
        "material_theme_tabs_autowidth": true,
        "overlay_scroll_bars": "enabled",
        "indent_guide_options": [ "draw_normal", "draw_active" ]

# Sublime Merge -------------------------------------------------------------------------
user:~$ sudo rpm -v --import https://download.sublimetext.com/sublimehq-rpm-pub.gpg
user:~$ sudo yum-config-manager --add-repo https://download.sublimetext.com/rpm/stable/x86_64/sublime-text.repo
user:~$ sudo yum install sublime-merge

# X11 Forwarding ------------------------------------------------------------------------
user:~$ sudo yum -y install xterm* xorg* xauth
user:~$ sudo vi /etc/ssh/sshd_config
AddressFamily inet <-- change
# restart bash
user:~$ xauth
xauth> info
xauth> exit

#########################################################################################
###                               Kubernetes With CRI-o                               ###
#########################################################################################
※ Kuberflow 1.2 system requirements (https://www.kubeflow.org/docs/started/k8s/overview/)
  > kubeflow 1.2 == docker-ce-18.09.8 + Kubernetes 1.16

# Firewall Stop -------------------------------------------------------------------------
※ Disable firewall starting from Kubernetes v1.19 onwards
root# systemctl stop firewalld \
   && systemctl disable firewalld

# Master & Node Host Domain Name Regist -------------------------------------------------
root# cat >> /etc/hosts<<EOF

192.168.0.24 vmaster
192.168.0.25 vnode1
192.168.0.26 vnode2
192.168.0.27 vnode3
192.168.0.28 vnode4
192.168.0.29 vnode5
192.168.0.30 vhub
EOF

# Kubernetes ----------------------------------------------------------------------------
root:~$ yum update -y \
     && yum install yum-utils nfs-utils bash-completion git -y
 
## letting ipTables see bridged networks
root:~$ cat << EOF | sudo tee /etc/modules-load.d/k8s.conf
br_netfilter
EOF
 
root:~$ cat << EOF | sudo tee /etc/sysctl.d/k8s.conf
net.bridge.bridge-nf-call-ip6tables = 1
net.bridge.bridge-nf-call-iptables = 1
EOF
root:~$ sysctl --system
 
##
## iptables config as specified by CRI-O documentation
# Create the .conf file to load the modules at bootup
root:~$ cat << EOF | sudo tee /etc/modules-load.d/crio.conf
overlay
br_netfilter
EOF

root:~$ modprobe overlay \
     && modprobe br_netfilter

# Set up required sysctl params, these persist across reboots.
root:~$ cat << EOF | sudo tee /etc/sysctl.d/99-kubernetes-cri.conf
net.bridge.bridge-nf-call-iptables  = 1
net.ipv4.ip_forward                 = 1
net.bridge.bridge-nf-call-ip6tables = 1
EOF
root:~$ sysctl --system

###
## configuring Kubernetes repositories
root:~$ cat << EOF | sudo tee /etc/yum.repos.d/kubernetes.repo
[kubernetes]
name=Kubernetes
baseurl=https://packages.cloud.google.com/yum/repos/kubernetes-el7-\$basearch
enabled=1
gpgcheck=1
repo_gpgcheck=1
gpgkey=https://packages.cloud.google.com/yum/doc/yum-key.gpg https://packages.cloud.google.com/yum/doc/rpm-package-key.gpg
exclude=kubelet kubeadm kubectl
EOF
 
## Set SELinux in permissive mode (effectively disabling it)
root:~$ setenforce 0
root:~$ sed -i 's/^SELINUX=enforcing$/SELINUX=permissive/' /etc/selinux/config
 
### Disable swap
root:~$ swapoff -a \
     && sed -i '/swap/d' /etc/fstab

##Refresh repo list
root:~$ yum repolist -y


## Install CRI-O binaries
##########################
#Operating system   $OS
#Centos 8   CentOS_8
#Centos 8 Stream    CentOS_8_Stream
#Centos 7   CentOS_7
 
#set OS/CRI-O version
root:~$ OS=CentOS_7 \
     && VERSION=1.20

# Install CRI-O
root:~$ curl -L -o /etc/yum.repos.d/devel:kubic:libcontainers:stable.repo https://download.opensuse.org/repositories/devel:/kubic:/libcontainers:/stable/$OS/devel:kubic:libcontainers:stable.repo
root:~$ curl -L -o /etc/yum.repos.d/devel:kubic:libcontainers:stable:cri-o:$VERSION.repo https://download.opensuse.org/repositories/devel:kubic:libcontainers:stable:cri-o:$VERSION/$OS/devel:kubic:libcontainers:stable:cri-o:$VERSION.repo
root:~$ yum install cri-o -y
 
##Install Kubernetes, specify Version as CRI-O
root:~$ yum install -y kubelet-1.20.0-0 kubeadm-1.20.0-0 kubectl-1.20.0-0 --disableexcludes=kubernetes

##Install Kubectl Auto-Complete
root:~$ kubectl completion bash > /etc/bash_completion.d/kubectl

##Check Installed ones
root:~$ rpm -qa | grep kube
root:~$ rpm -qa | grep cri-o

## The following line to be added for CRI-O befor "EnvironmentFile=-/etc/sysconfig/kubelet"
root:~$ vi /usr/lib/systemd/system/kubelet.service.d/10-kubeadm.conf
Environment="KUBELET_CGROUP_ARGS=--cgroup-driver=systemd"
ExecStart=/usr/bin/kubelet $KUBELET_KUBECONFIG_ARGS ... $KUBELET_CGROUP_ARGS

root:~$ systemctl daemon-reload \
     && systemctl enable crio --now \
     && systemctl enable kubelet --now

##Check Installed ones
root:~$ systemctl status kubelet.service
root:~$ systemctl status crio.service


#########################################################################################
###                                 Kubernetes Master                                 ###
#########################################################################################
# Initialize Master ---------------------------------------------------------------------
root:~$ kubeadm init --pod-network-cidr=10.244.0.0/16
root:~$ cat >> ~/.bashrc << EOF

export KUBECONFIG=/etc/kubernetes/admin.conf
EOF

# Check Installed ones ------------------------------------------------------------------
root:~$ kubectl get node -o wide
root:~$ kubectl get pod --all-namespaces -o wide

# Setting Up For Master User ------------------------------------------------------------
user:~$ mkdir ~/.kube \
     && sudo cp -i /etc/kubernetes/admin.conf ~/.kube/config \
     && sudo chown -R $(id -u):$(id -g) ~/.kube
user:~$ curl https://docs.projectcalico.org/manifests/calico.yaml -O \
     && kubectl apply -f calico.yaml
user:~$ kubectl taint nodes --all node-role.kubernetes.io/master-
user:~$ watch kubectl get all --all-namespaces -o wide

# Cluster join command ------------------------------------------------------------------
rsnet# kubeadm token create --print-join-command




#########################################################################################
###                                      Docker                                       ###
#########################################################################################
# Docker & Compose ----------------------------------------------------------------------
user:~$ sudo yum install -y yum-utils device-mapper-persistent-data lvm2
user:~$ sudo yum-config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo
user:~$ sudo yum install -y docker-ce docker-ce-cli containerd.io
user:~$ sudo usermod -aG docker $(whoami)
user:~$ sudo systemctl enable docker.service
user:~$ sudo systemctl start docker.service
user:~$ sudo yum install gcc glibc glibc-common gd gd-devel python3-devel -y
user:~$ sudo pip3 install docker-compose
user:~$ docker-compose version




#########################################################################################
###                          Docker Hub For Public & Private                          ###
#########################################################################################
* Public Docker-hub Usage ---------------------------------------------------------------
user:~$ docker login
user:~$ docker tag SOURCE_IMAGE[:TAG] DOCKER HUB ID/TARGET_IMAGE[:TAG]
  > ex: docker tag docterm:last nockchun/docterm:1.0
user:~$ docker push <dockerhub_id>/<image_name>:<version>
  > ex: docker push nockchun/docterm:1.0

* Private Docker-hub Install ------------------------------------------------------------
user:~$ docker pull registry
user:~$ mkdir ~/registry
user:~$ docker run -d --name docker-registry --restart=always \
               -p 5000:5000 \
               -v /home/rsnet/registry:/var/lib/registry/docker/registry/v2 \
               registry

* Private Docker-hub Install With Https -------------------------------------------------
user:~$ cd home/rsnet/certs
#user:~$ openssl genrsa -out ca.key 4096
#user:~$ openssl req -new -x509 -days 1826 -key ca.key -out ca.crt
user:~$ cat >> openssl.conf <<EOF
[ req ]
distinguished_name = req_distinguished_name
x509_extensions    = req_ext
default_md         = sha256
prompt             = no
encrypt_key        = no

[ req_distinguished_name ]
countryName            = "GB"
localityName           = "London"
organizationName       = "Just Me and Opensource"
organizationalUnitName = "YouTube"
commonName             = "<Docker Server IP>"
emailAddress           = "test@example.com"

[ req_ext ]
subjectAltName = @alt_names

[alt_names]
DNS = "<Docker Server IP>"
EOF
user:~$ openssl req \
-x509 -newkey rsa:4096 -days 1826 -config openssl.conf \
-keyout certs/ca.key -out certs/ca.crt

user:~$ docker run -d --name docker-registry --restart=always \
               -p 5000:5000 \
               -v /home/rsnet/registry:/var/lib/registry/docker/registry/v2 \
               -v /home/rsnet/certs:/certs \
               -e REGISTRY_HTTP_TLS_CERTIFICATE=/certs/ca.crt \
               -e REGISTRY_HTTP_TLS_KEY=/certs/ca.key \
               registry

* Private Docker-hub Install With Basic Auth --------------------------------------------
user:~$ cat > docker-registry.yaml << EOF
version: '3.0'
services:
  registry:
    container_name: docker-registry
    restart: always
    image: registry
    environment:
      REGISTRY_HTTP_TLS_CERTIFICATE: /certs/domain.crt
      REGISTRY_HTTP_TLS_KEY: /certs/domain.key
      REGISTRY_AUTH: htpasswd
      REGISTRY_AUTH_HTPASSWD_PATH: /auth/htpasswd
      REGISTRY_AUTH_HTPASSWD_REALM: Registry Realm
    ports:
      - 5000:5000
    volumes:
      - /home/rsnet/registry:/var/lib/registry
      - /home/rsnet/certs:/certs
      - /home/rsnet/auth:/auth
EOF
user:~$ mkdir /auth
user:~$ sudo yum install httpd-tools
user:~$ htpasswd -Bbn testuser testpassword >> auth/htpasswd

* copy certificate to client host -------------------------------------------------------
# ubuntu
user:~$ cp ca.crt /usr/share/ca-certificates/extra/
user:~$ vi /etc/ca-certificates.conf
extra/ca.crt
user:~$ update-ca-certificates
user:~$ systemctl restart docker

# centos
user:~$ sudo cp ca.crt /etc/pki/ca-trust/source/anchors/
user:~$ update-ca-trust


* Using Private Docker-Hub With Http ----------------------------------------------------
> Settings For use without https 
user:~$ sudo vi /etc/docker/daemon.json
    > {
    >     "insecure-registries" : ["xx.xx.xx.xx:5000"]
    > }
user:~$ sudo systemctl daemon-reload \
     && sudo systemctl restart docker

> Push Image to Private Hub
user:~$ docker tag myhello localhost:5000/myhello
user:~$ docker push localhost:5000/myhello

> Image Check
user:~$ curl -X GET http://xx.xx.xx.xx:5000/v2/_catalog

> Tag Info Check
user:~$ curl -X GET http://xx.xx.xx.xx:5000/v2/hello-world/tags/list


























#########################################################################################
###                              Private Helm Repository                              ###
#########################################################################################
user:~$ helm create <project>
user:~$ helm package <project>
user:~$ mv project-0.1.0.tgz stable
user:~$ helm repo index stable --url https://nockchun.github.io/rsnet-helm/stable
user:~$ git add .
user:~$ git commit -m "add project chart"
user:~$ git push

user:~$ helm repo add rsnet-helm https://nockchun.github.io/rsnet-helm/stable
user:~$ helm search repo rsnet-helm
user:~$ helm install rsnet-helm/project


































