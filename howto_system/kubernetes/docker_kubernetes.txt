#########################################################################################
###                                  Basic Settings                                   ###
#########################################################################################
* Network Setting -----------------------------------------------------------------------
vi /etc/sysconfig/network-scripts/ifcfg-eth0
BOOTPROTO=static
ONBOOT=yes
IPADDR=192.168.0.100
GATEWAY=192.168.0.1
NETMASK=255.255.255.0
DNS1=168.126.63.1
DNS2=8.8.8.8

* Bash Auto Completion ------------------------------------------------------------------
root# yum install -y epel-release
root# yum install -y bash-completion-extras

* Python & Powerline Bash ---------------------------------------------------------------
root# sudo yum install -y epel-release
root# sudo yum install wget sysstat lrzsz lsof bzip2 unzip iftop -y \
   && sudo yum install python3 python3-pip git fontconfig -y
root# sudo ln -s /usr/bin/pip3 /usr/bin/pip \
   && sudo ln -s /usr/bin/python3 /usr/bin/python \
   && sudo pip install --upgrade pip \
   && sudo pip install git+git://github.com/Lokaltog/powerline
root# wget https://github.com/Lokaltog/powerline/raw/develop/font/PowerlineSymbols.otf \
   && wget https://github.com/Lokaltog/powerline/raw/develop/font/10-powerline-symbols.conf \
   && sudo mv PowerlineSymbols.otf /usr/share/fonts/ \
   && sudo mv 10-powerline-symbols.conf /etc/fonts/conf.d/ \
   && fc-cache -vf /usr/share/fonts/

root# cat >>/etc/bashrc<<EOF

export TERM="screen-256color"
if [ -f `which powerline-daemon` ]; then
    powerline-daemon -q
    POWERLINE_BASH_CONTINUATION=1
    POWERLINE_BASH_SELECT=1
fi
if [ -f /usr/local/lib/python3.6/site-packages/powerline/bindings/bash/powerline.sh ]; then
    source /usr/local/lib/python3.6/site-packages/powerline/bindings/bash/powerline.sh
fi
EOF


* Vi Editor -----------------------------------------------------------------------------
root# yum install -y vim
root# cat >>/etc/vimrc<<EOF

set number
set tabstop=4
set shiftwidth=4
set showmatch
set title
set hlsearch
set fileencodings=utf-8,euc-kr
set ruler
set title
set statusline=\ %<%l:%v\ [%P]%=%a\ %h%m%r\ %F\

syntax on
EOF

# Powerline vim -------------------------------------------------------------------------
root# cat >>/etc/vimrc<<EOF

set rtp+=/usr/local/lib/python3.6/site-packages/powerline/bindings/vim/
set laststatus=2
set t_Co=256
EOF




#########################################################################################
###                      Docker, Nvidia-Docker2 For Kubeflow 1.2                      ###
#########################################################################################
※ Kuberflow 1.2 system requirements (https://www.kubeflow.org/docs/started/k8s/overview/)
  > kubeflow 1.2 == docker-ce-18.09.8 + Kubernetes 1.16

# Docker & Compose ----------------------------------------------------------------------
user:~$ sudo yum install -y yum-utils device-mapper-persistent-data lvm2
user:~$ sudo yum-config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo
user:~$ sudo yum install -y docker-ce docker-ce-cli containerd.io
user:~$ sudo usermod -aG docker $(whoami)
user:~$ sudo systemctl enable docker.service
user:~$ sudo systemctl start docker.service
user:~$ sudo yum install gcc glibc glibc-common gd gd-devel python3-devel -y
user:~$ sudo pip install docker-compose
user:~$ docker-compose version

# Firewall Stop -------------------------------------------------------------------------
※ Disable firewall starting from Kubernetes v1.19 onwards
root# systemctl stop firewalld
root# systemctl disable firewalld

# Master & Node Host Domain Name Regist -------------------------------------------------
root# cat >> /etc/hosts<<EOF
192.168.0.24 vmaster
192.168.0.25 vnode1
192.168.0.26 vnode2
192.168.0.27 vnode3
192.168.0.28 vnode4
192.168.0.29 vnode5
EOF

























## Install yum-utils, bash completion, git, and more
sudo yum install yum-utils nfs-utils bash-completion git -y
 
## letting ipTables see bridged networks
cat <<EOF | sudo tee /etc/modules-load.d/k8s.conf
br_netfilter
EOF
 
cat <<EOF | sudo tee /etc/sysctl.d/k8s.conf
net.bridge.bridge-nf-call-ip6tables = 1
net.bridge.bridge-nf-call-iptables = 1
EOF
sudo sysctl --system

##
## iptables config as specified by CRI-O documentation
# Create the .conf file to load the modules at bootup
cat <<EOF | sudo tee /etc/modules-load.d/crio.conf
overlay
br_netfilter
EOF


sudo modprobe overlay
sudo modprobe br_netfilter


# Set up required sysctl params, these persist across reboots.
cat <<EOF | sudo tee /etc/sysctl.d/99-kubernetes-cri.conf
net.bridge.bridge-nf-call-iptables  = 1
net.ipv4.ip_forward                 = 1
net.bridge.bridge-nf-call-ip6tables = 1
EOF

sudo sysctl --system


###
## configuring Kubernetes repositories
cat <<EOF | sudo tee /etc/yum.repos.d/kubernetes.repo
[kubernetes]
name=Kubernetes
baseurl=https://packages.cloud.google.com/yum/repos/kubernetes-el7-\$basearch
enabled=1
gpgcheck=1
repo_gpgcheck=1
gpgkey=https://packages.cloud.google.com/yum/doc/yum-key.gpg https://packages.cloud.google.com/yum/doc/rpm-package-key.gpg
exclude=kubelet kubeadm kubectl
EOF
 
## Set SELinux in permissive mode (effectively disabling it)
sudo setenforce 0
sudo sed -i 's/^SELINUX=enforcing$/SELINUX=permissive/' /etc/selinux/config
 
### Disable swap
swapoff -a
 
##Renove swap from fstab
sudo sed -i '/swap/d' /etc/fstab
 
 
##Refresh repo list
yum repolist -y
 
 
## Install CRI-O binaries
##########################
 
#Operating system   $OS
#Centos 8   CentOS_8
#Centos 8 Stream    CentOS_8_Stream
#Centos 7   CentOS_7
 
 
#set OS version
OS=CentOS_8
 
#set CRI-O
VERSION=1.20
 
# Install CRI-O
sudo curl -L -o /etc/yum.repos.d/devel:kubic:libcontainers:stable.repo https://download.opensuse.org/repositories/devel:/kubic:/libcontainers:/stable/$OS/devel:kubic:libcontainers:stable.repo
sudo curl -L -o /etc/yum.repos.d/devel:kubic:libcontainers:stable:cri-o:$VERSION.repo https://download.opensuse.org/repositories/devel:kubic:libcontainers:stable:cri-o:$VERSION/$OS/devel:kubic:libcontainers:stable:cri-o:$VERSION.repo
sudo yum install cri-o -y
 
 
##Install Kubernetes, specify Version as CRI-O
sudo yum install -y kubelet kubeadm kubectl --disableexcludes=kubernetes










































sudo systemctl daemon-reload
sudo systemctl enable crio --now
sudo systemctl enable kubelet --now






