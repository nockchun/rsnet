#########################################################################################
###                                       Helm 3                                      ###
#########################################################################################
* Install Helm 3 ------------------------------------------------------------------------
root:~$ rm -rf /usr/local/bin/helm
root:~$ curl -fsSL -o get_helm.sh https://raw.githubusercontent.com/helm/helm/master/scripts/get-helm-3
root:~$ chmod u+x get_helm.sh
root:~$ ./get_helm.sh

user:~$ helm repo add stable https://charts.helm.sh/stable
user:~$ helm repo update
user:~$ helm search repo stable


#########################################################################################
###                                      MetalLB                                      ###
#########################################################################################
* Install MetalLB -----------------------------------------------------------------------
user:~$ kubectl apply -f https://raw.githubusercontent.com/metallb/metallb/v0.9.6/manifests/namespace.yaml
user:~$ kubectl apply -f https://raw.githubusercontent.com/metallb/metallb/v0.9.6/manifests/metallb.yaml
user:~$ kubectl create secret generic -n metallb-system memberlist --from-literal=secretkey="$(openssl rand -base64 128)"

* Layer 2 Configuration -----------------------------------------------------------------
user:~$ cat << EOF | kubectl create -f -
apiVersion: v1
kind: ConfigMap
metadata:
  namespace: metallb-system
  name: config
data:
  config: |
    address-pools:
    - name: default
      protocol: layer2
      addresses:
      - 192.168.0.180-192.168.0.199
EOF

* Verifying the installation ------------------------------------------------------------
user:~$ kubectl get all -n metallb-system


#########################################################################################
###                                   NGINX Ingress                                   ###
#########################################################################################
* Install using Helm 3 ------------------------------------------------------------------
user:~$ helm repo add ingress-nginx https://kubernetes.github.io/ingress-nginx
user:~$ helm repo update
user:~$ kubectl create ns ingress-nginx
user:~$ helm install ingress-nginx ingress-nginx/ingress-nginx -n ingress-nginx

* Verifying the installation ------------------------------------------------------------
user:~$ kubectl get all -n ingress-nginx


#########################################################################################
###                                   Cert-Manager                                    ###
#########################################################################################
user:~$ kubectl create namespace cert-manager
user:~$ helm repo add jetstack https://charts.jetstack.io
user:~$ helm repo update
user:~$ helm install \
  cert-manager jetstack/cert-manager \
  --namespace cert-manager \
  --create-namespace \
  --version v1.3.1 \
  --set installCRDs=true

* Verifying the installation ------------------------------------------------------------
$ kubectl get all -n cert-manager

* Creating an selfsigned ca ClusterIssuer -----------------------------------------------
user:~$ cat << EOF | kubectl create -f -
apiVersion: cert-manager.io/v1alpha2
kind: ClusterIssuer
metadata:
  name: ca-issuer
  namespace: cert-manager
spec:
  selfSigned: {}
EOF


#########################################################################################
###                                Kubernetes Dashboard                               ###
#########################################################################################
* Deploy Dashboard To k8s ---------------------------------------------------------------
user:~$ kubectl apply -f https://raw.githubusercontent.com/kubernetes/dashboard/v2.2.0/aio/deploy/recommended.yaml

* Creating sample Accout ---------------------------------------------------------------
user:~$ cat << EOF | kubectl create -f -
apiVersion: v1
kind: ServiceAccount
metadata:
  name: admin-user
  namespace: kubernetes-dashboard
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: admin-user
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: cluster-admin
subjects:
- kind: ServiceAccount
  name: admin-user
  namespace: kubernetes-dashboard
EOF

# Create Bearer Token -------------------------------------------------------------------
user:~$ nohup kubectl proxy --port=8001 --address=0.0.0.0 --accept-hosts='^*$' &
user:~$ kubectl -n kubernetes-dashboard describe secret $(kubectl -n kubernetes-dashboard get secret | grep admin-user | awk '{print $1}')

* SSH-Tunneling at client ---------------------------------------------------------------
user:~$ ssh -f -N vmaster -L9901:localhost:8001
>>> Connection URL : http://localhost:9901/api/v1/namespaces/kubernetes-dashboard/services/https:kubernetes-dashboard:/proxy/
















The ingress-nginx controller has been installed.
It may take a few minutes for the LoadBalancer IP to be available.
You can watch the status by running 'kubectl --namespace ingress-nginx get services -o wide -w ingress-nginx-controller'

An example Ingress that makes use of the controller:

  apiVersion: networking.k8s.io/v1beta1
  kind: Ingress
  metadata:
    annotations:
      kubernetes.io/ingress.class: nginx
    name: example
    namespace: foo
  spec:
    rules:
      - host: www.example.com
        http:
          paths:
            - backend:
                serviceName: exampleService
                servicePort: 80
              path: /
    # This section is only required if TLS is to be enabled for the Ingress
    tls:
        - hosts:
            - www.example.com
          secretName: example-tls

If TLS is enabled for the Ingress, a Secret containing the certificate and key must also be provided:

  apiVersion: v1
  kind: Secret
  metadata:
    name: example-tls
    namespace: foo
  data:
    tls.crt: <base64 encoded cert>
    tls.key: <base64 encoded key>
  type: kubernetes.io/tls















* For Dashboard -----------------------------------------------------------------
user:~$ mkdir certs; cd certs
user:~$ openssl genrsa -des3 -passout pass:testpass -out dashboard.pass.key 2048
user:~$ openssl rsa -passin pass:testpass -in dashboard.pass.key -out dashboard.key
user:~$ rm dashboard.pass.key
user:~$ openssl req -new -key dashboard.key -out dashboard.csr
# Create SSL Certificate
user:~$ openssl x509 -req -sha256 -days 365 -in dashboard.csr -signkey dashboard.key -out dashboard.crt
# Create k8s secret
user:~$ cd .. && kubectl create secret generic kubernetes-dashboard-certs --from-file=./certs -n kube-system
user:~$ vi recommended.yaml
 32 kind: Service
 33 apiVersion: v1
 34 metadata:
 35   labels:
 36     k8s-app: kubernetes-dashboard
 37   name: kubernetes-dashboard
 38   namespace: kubernetes-dashboard
 39 spec:
 40   type: LoadBalancer <-- change here
 41   ports:
 42     - port: 443
 43       targetPort: 8443
 44   selector:
 45     k8s-app: kubernetes-dashboard

user:~$ kubectl apply -f recommended.yaml
user:~$ kubectl get svc --all-namespaces






