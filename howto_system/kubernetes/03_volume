#########################################################################################
###                               Local Path Provisioner                              ###
#########################################################################################
* Install -------------------------------------------------------------------------------
user:~$ wget https://raw.githubusercontent.com/rancher/local-path-provisioner/master/deploy/local-path-storage.yaml
user:~$ vi local-path-storage.yaml
reclaimPolicy: Retain

user:~$ kubectl apply -f local-path-storage.yaml
user:~$ kubectl patch storageclass local-path -p '{"metadata": {"annotations":{"storageclass.kubernetes.io/is-default-class":"true"}}}'

* Verifying the installation ------------------------------------------------------------
user:~$ kubectl get storageclass

* Dynamic PersistentVolume --------------------------------------------------------------
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: local-path-pvc
spec:
  accessModes:
    - ReadWriteOnce
  storageClassName: local-path
  resources:
    requests:
      storage: 128Mi


#########################################################################################
###                                  Rook For Cephfs                                  ###
#########################################################################################
â€» REF SITE : https://rook.io

user:~$ git clone --single-branch --branch v1.6.2 https://github.com/rook/rook.git \
     && cd rook/cluster/examples/kubernetes/ceph/ \
     && kubectl create -f crds.yaml -f common.yaml -f operator.yaml
user:~$ kubectl create -f cluster.yaml
user:~$ watch kubectl get pod -n rook-ceph

user:~$ kubectl create -f filesystem.yaml -f toolbox.yaml
user:~$ watch kubectl get pod -n rook-ceph

user:~$ kubectl create -f csi/cephfs/storageclass.yaml -f csi/rbd/storageclass.yaml

user:~$ kubectl exec -it deploy/rook-ceph-tools -n rook-ceph -- bash
     >> ceph status
     >> ceph osd status

* Ingress -------------------------------------------------------------------------------
user:~$ cat << EOF | kubectl create -f -
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: dashboard-ceph
  namespace: rook-ceph
  annotations:
    kubernetes.io/ingress.class: "nginx"
    nginx.ingress.kubernetes.io/ssl-passthrough: "true"
    nginx.ingress.kubernetes.io/backend-protocol: "HTTPS"
spec:
  rules:
  - host: cephboard.realstudy.net
    http:
      paths:
      - pathType: Prefix
        path: /
        backend:
          service:
            name: rook-ceph-mgr-dashboard
            port: 
              number: 8443
EOF

* CEPH Filesystem PVC -------------------------------------------------------------------
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: cephfs-pvc
spec:
  accessModes:
  - ReadWriteMany
  resources:
    requests:
      storage: 1Gi
  storageClassName: rook-cephfs


#########################################################################################
###                                  NFS Provisioner                                  ###
#########################################################################################
* NFS Server Setup : 192.168.0.25 -------------------------------------------------------
root:~$ yum install -y nfs-utils
root:~$ mkdir -p /data/nfs
root:~$ chmod -R 777 /data/nfs
root:~$ cat > /etc/exports << EOF
/data/nfs 192.168.0.0/24(rw,sync,no_subtree_check)
EOF

root:~$ exportfs -a
root:~$ systemctl restart nfs-server
root:~$ systemctl enable nfs-server


* NFS Client Setup : 192.168.0.26 -------------------------------------------------------
user:~$ sudo yum install -y nfs nfs-utils
user:~$ mkdir nfs
user:~$ sudo mount 192.168.0.25:/data/nfs nfs
user:~$ sudo umount nfs

* PVC -----------------------------------------------------------------------------------
kind: PersistentVolumeClaim
apiVersion: v1
metadata:
  name: test-claim
spec:
  storageClassName: managed-nfs-storage
  accessModes:
    - ReadWriteMany
  resources:
    requests:
      storage: 1Mi




