#########################################################################################
###                                       Helm 3                                      ###
#########################################################################################
* Install Helm 3 ------------------------------------------------------------------------
root:~$ rm -rf /usr/local/bin/helm
root:~$ curl -fsSL -o get_helm.sh https://raw.githubusercontent.com/helm/helm/master/scripts/get-helm-3
root:~$ chmod u+x get_helm.sh
root:~$ ./get_helm.sh

user:~$ helm repo add stable https://charts.helm.sh/stable
user:~$ helm repo update
user:~$ helm search repo stable


#########################################################################################
###                                      MetalLB                                      ###
#########################################################################################
* Install MetalLB -----------------------------------------------------------------------
user:~$ kubectl apply -f https://raw.githubusercontent.com/metallb/metallb/v0.9.6/manifests/namespace.yaml \
     && kubectl apply -f https://raw.githubusercontent.com/metallb/metallb/v0.9.6/manifests/metallb.yaml \
     && kubectl create secret generic -n metallb-system memberlist --from-literal=secretkey="$(openssl rand -base64 128)"

* Verifying the installation ------------------------------------------------------------
user:~$ kubectl get all -n metallb-system

* Layer 2 Configuration -----------------------------------------------------------------
user:~$ cat << EOF | kubectl create -f -
apiVersion: v1
kind: ConfigMap
metadata:
  namespace: metallb-system
  name: config
data:
  config: |
    address-pools:
    - name: default
      protocol: layer2
      addresses:
      - 192.168.0.231-192.168.0.250
EOF


#########################################################################################
###                                   NGINX Ingress                                   ###
#########################################################################################
* Install using Helm 3 ------------------------------------------------------------------
user:~$ helm repo add ingress-nginx https://kubernetes.github.io/ingress-nginx \
     && helm repo update \
     && kubectl create ns ingress-nginx \
     && helm install ingress-nginx ingress-nginx/ingress-nginx -n ingress-nginx

* Verifying the installation ------------------------------------------------------------
user:~$ kubectl get all -n ingress-nginx


#########################################################################################
###                                   Cert-Manager                                    ###
#########################################################################################
user:~$ kubectl create namespace cert-manager \
     && helm repo add jetstack https://charts.jetstack.io \
     && helm repo update
user:~$ helm install \
  cert-manager jetstack/cert-manager \
  --namespace cert-manager \
  --create-namespace \
  --version v1.3.1 \
  --set installCRDs=true

* Verifying the installation ------------------------------------------------------------
user:~$ kubectl get all -n cert-manager

* Creating an selfsigned ca ClusterIssuer -----------------------------------------------
user:~$ cat << EOF | kubectl create -f -
apiVersion: cert-manager.io/v1
kind: ClusterIssuer
metadata:
  name: ca-issuer
  namespace: cert-manager
spec:
  selfSigned: {}
EOF


#########################################################################################
###                                Kubernetes Dashboard                               ###
#########################################################################################
* Deploy Dashboard To k8s ---------------------------------------------------------------
user:~$ kubectl apply -f https://raw.githubusercontent.com/kubernetes/dashboard/v2.2.0/aio/deploy/recommended.yaml

* Verifying the installation ------------------------------------------------------------
$ kubectl get all -n kubernetes-dashboard

* Creating sample Accout ---------------------------------------------------------------
user:~$ cat << EOF | kubectl create -f -
apiVersion: v1
kind: ServiceAccount
metadata:
  name: admin-user
  namespace: kubernetes-dashboard
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: admin-user
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: cluster-admin
subjects:
- kind: ServiceAccount
  name: admin-user
  namespace: kubernetes-dashboard
EOF

# Create Bearer Token -------------------------------------------------------------------
user:~$ nohup kubectl proxy --port=8001 --address=0.0.0.0 --accept-hosts='^*$' &
user:~$ kubectl -n kubernetes-dashboard describe secret $(kubectl -n kubernetes-dashboard get secret | grep admin-user | awk '{print $1}')

* SSH-Tunneling at client ---------------------------------------------------------------
user:~$ pkill -f L9901
user:~$ ssh -f -N vmaster -L9901:localhost:8001
>>> Connection URL : http://localhost:9901/api/v1/namespaces/kubernetes-dashboard/services/https:kubernetes-dashboard:/proxy/


* SSL Ingress ---------------------------------------------------------------------------
user:~$ cat << EOF | kubectl create -f -
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  annotations:
    kubernetes.io/ingress.class: "nginx"
    nginx.ingress.kubernetes.io/ssl-redirect: "true"
    nginx.ingress.kubernetes.io/backend-protocol: "HTTPS"
    nginx.ingress.kubernetes.io/force-ssl-redirect: "false"
    nginx.ingress.kubernetes.io/secure-backends: "true"
    ingress.kubernetes.io/ssl-passthrough: "true"
    nginx.org/ssl-backend: "kubernetes-dashboard"
    kubernetes.io/ingress.allow-http: "false"
    nginx.ingress.kubernetes.io/proxy-body-size: "100M"
  name: dashboard-ingress
  namespace: kubernetes-dashboard
spec:
  tls:
  - hosts:
    - ingress.demo.com
    secretName: demoweb-tls
  rules:
  - host: k8board.realstudy.net
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: kubernetes-dashboard
            port:
              number: 443
EOF

* Ingress -------------------------------------------------------------------------------
user:~$ cat << EOF | kubectl create -f -
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: dashboard-ingress
  namespace: kubernetes-dashboard
  annotations:
    kubernetes.io/ingress.class: "nginx"
    nginx.ingress.kubernetes.io/ssl-passthrough: "true"
    nginx.ingress.kubernetes.io/backend-protocol: "HTTPS"
spec:
  rules:
  - host: k8board.realstudy.net
    http:
      paths:
      - pathType: Prefix
        path: /
        backend:
          service:
            name: kubernetes-dashboard
            port: 
              number: 443
EOF

* Verifying the installation ------------------------------------------------------------
user:~$ kubectl get ingress -n kubernetes-dashboard



