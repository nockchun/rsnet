# Add repository & Install required
- name: Add epel-release Repository
  shell: |
    dnf install -y epel-release
  when: ansible_facts['os_family'] in ["RedHat", "CentOS", "Rocky"]

- name: Add epel-next-release Repository
  shell: |
    dnf install -y epel-next-release
  when: ansible_facts['os_family'] in ["RedHat", "CentOS", "Rocky"]

- name: Add CRB Repository
  shell: |
    dnf config-manager --set-enabled crb
  when: ansible_facts['os_family'] in ["RedHat", "CentOS", "Rocky"]

- name: Update the DNF package repository cache
  shell: |
    dnf makecache
  when: ansible_facts['os_family'] in ["RedHat", "CentOS", "Rocky"]

- name: Install required dependencies
  shell: |
    dnf install -y kernel-devel kernel-headers tar bzip2 make automake gcc gcc-c++ pciutils elfutils-libelf-devel libglvnd-opengl libglvnd-glx libglvnd-devel acpid pkgconfig dkms
  when: ansible_facts['os_family'] in ["RedHat", "CentOS", "Rocky"]

# Nouveau Driver off
- name: Nouveau Driver Off 1
  shell: |
    if rpm -q xorg-x11-drivers > /dev/null; then rpm -e xorg-x11-drivers; fi \
    && if rpm -q xorg-x11-drv-nouveau > /dev/null; then rpm -e xorg-x11-drv-nouveau; fi
  when: ansible_facts['os_family'] in ["RedHat", "CentOS", "Rocky"]

- name: Nouveau Driver Off 2
  shell: |
    echo 'blacklist nouveau' >> /etc/modprobe.d/blacklist.conf
  when: ansible_facts['os_family'] in ["RedHat", "CentOS", "Rocky"]

- name: Add GRUB_CMDLINE to /etc/default/grub
  replace:
    path: /etc/default/grub
    regexp: 'GRUB_CMDLINE_LINUX=.*'
    replace: 'GRUB_CMDLINE_LINUX="crashkernel=1G-4G:192M,4G-64G:256M,64G-:512M resume=/dev/mapper/rl-swap rd.lvm.lv=rl/root rd.lvm.lv=rl/swap rd.driver.blacklist=nouveau"'
  when: ansible_facts['os_family'] in ["RedHat", "CentOS", "Rocky"]

- name: Grub setting (BIOS USER run this)
  shell: |
    grub2-mkconfig -o /boot/grub2/grub.cfg
  when: ansible_facts['os_family'] in ["RedHat", "CentOS", "Rocky"]

- name: Grub setting (UEFI USER run this)
  shell: |
    grub2-mkconfig -o /boot/efi/EFI/$(. /etc/os-release;echo $ID)/grub.cfg
  when: ansible_facts['os_family'] in ["RedHat", "CentOS", "Rocky"]

- name: Reboot System (wait for server active)
  reboot:
    reboot_timeout: 600
    test_command: uptime
  when: ansible_facts['os_family'] in ["RedHat", "CentOS", "Rocky"]

# Install Nvidia Driver
- name: Add Nvidia Driver Repository
  shell: |
    dnf config-manager --add-repo http://developer.download.nvidia.com/compute/cuda/repos/rhel9/$(uname -i)/cuda-rhel9.repo
  when: ansible_facts['os_family'] in ["RedHat", "CentOS", "Rocky"]

- name: Update the DNF package repository cache
  shell: |
    dnf makecache
  when: ansible_facts['os_family'] in ["RedHat", "CentOS", "Rocky"]

- name: Dnf module Install
  shell: |
    dnf module install -y nvidia-driver:{{ docker.nvidia_driver }}-dkms/default
  when: ansible_facts['os_family'] in ["RedHat", "CentOS", "Rocky"]

- name: Dnf clean packages
  shell: |
    dnf clean packages
  when: ansible_facts['os_family'] in ["RedHat", "CentOS", "Rocky"]

- name: Reboot System (wait for server active)
  reboot:
    reboot_timeout: 600
    test_command: uptime
  when: ansible_facts['os_family'] in ["RedHat", "CentOS", "Rocky"]

- name: Check nvidia installed
  shell: |
    nvidia-smi
  register: nvidia_log
  when: ansible_facts['os_family'] in ["RedHat", "CentOS", "Rocky"]

- name: Install Nvidia Docker 2
  shell: |
    curl https://nvidia.github.io/nvidia-docker/rhel9.0/nvidia-docker.repo > /etc/yum.repos.d/nvidia-docker.repo
  when: ansible_facts['os_family'] in ["RedHat", "CentOS", "Rocky"]

- name: Install Nvidia Docker 2
  shell: |
    yum install -y nvidia-docker2
  when: ansible_facts['os_family'] in ["RedHat", "CentOS", "Rocky"]

# # Debian계열 Setting Docker for nvidia GPU 해야됨!!!!
# # Ubuntu Docker Install
# - name: Nvidia docker Install 
#   shell: |
#     distribution=ubuntu22.04 \
#     && curl -fsSL https://nvidia.github.io/libnvidia-container/gpgkey | gpg --dearmor -o /usr/share/keyrings/nvidia-container-toolkit-keyring.gpg \
#     && curl -s -L https://nvidia.github.io/libnvidia-container/$distribution/libnvidia-container.list | \
#     sed 's#deb https://#deb [signed-by=/usr/share/keyrings/nvidia-container-toolkit-keyring.gpg] https://#g' | \
#     tee /etc/apt/sources.list.d/nvidia-container-toolkit.list
#   when: ansible_facts['os_family'] in ["Debian", "Ubuntu"]

# - name: yum update && install nvidia-docker 2
#   shell: |
#     apt update \
#     && apt install -y nvidia-docker2
#   when: ansible_facts['os_family'] in ["Debian", "Ubuntu"]

# RedHat과 Debian 계열 공통 내용
- name: Insert default-runtime in /etc/docker/daemon.json
  lineinfile:
    path: /etc/docker/daemon.json
    insertafter: '^{'
    line: '    "default-runtime": "nvidia",'

- name: Change nvidia path in /etc/docker/daemon.json
  replace:
    path: /etc/docker/daemon.json
    regexp: '"path":.*'
    replace: '"path":"/usr/bin/nvidia-container-runtime",'
