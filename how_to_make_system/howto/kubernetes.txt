###########################################################################
###                        Working With Namespace                       ###
###########################################################################
* namespace ---------------------------------------------------------------
> create name space with yaml
user:~$ cat >> custom-namespace.yaml << EOF
apiVersion: v1
  kind: Namespace
  metadata:
    name:custom-namespace
EOF
user:~$ kubectl create -f custom-namespace.yaml

> create name space with command
user:~$ kubectl create namespace {namespace}

> 해당 컨텍스트에서 모든 후속 kubectl 커맨드에 대한 네임스페이스를 영구적으로 저장한다
user:~$ kubectl config set-context --current --namespace=my-namespace
user:~$ kubectl config view

> To delete everything from the current namespace
user:~$ kubectl delete all --all

> To delete everything from a certain namespace you use the -n flag:
user:~$ kubectl delete all --all -n {namespace}

> You can also delete a namespace and re-create it. This will delete everything that belongs to it:
user:~$ kubectl delete all --all -n {namespace}
kubectl delete namespace {namespace}


###########################################################################
###                         Kubernetes Dashboard                        ###
###########################################################################
* Deploy Dashboard To k8s -------------------------------------------------
user:~$ kubectl apply -f https://raw.githubusercontent.com/kubernetes/dashboard/v2.0.0/aio/deploy/recommended.yaml
user:~$ nohup kubectl proxy --port=8001 --address=xx.xx.xx.xx --accept-hosts='^*$' &
user:~$ http://localhost:8001/api/v1/namespaces/kubernetes-dashboard/services/https:kubernetes-dashboard:/proxy/

* Creating sample Accout -------------------------------------------------
user:~$ cat <<EOF | kubectl create -f -
apiVersion: v1
kind: ServiceAccount
metadata:
  name: admin-user
  namespace: kubernetes-dashboard
EOF

* Create sample ClusterRoleBinding ----------------------------------------
user:~$ cat <<EOF | kubectl create -f -
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: admin-user
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: cluster-admin
subjects:
- kind: ServiceAccount
  name: admin-user
  namespace: kubernetes-dashboard
EOF

# Create Bearer Token ------------------------------------------------------
user:~$ kubectl -n kubernetes-dashboard describe secret $(kubectl -n kubernetes-dashboard get secret | grep admin-user | awk '{print $1}')


###########################################################################
###                            Ingress Nginx                            ###
###########################################################################
user:~$ kubectl apply -f https://raw.githubusercontent.com/kubernetes/ingress-nginx/nginx-0.27.1/deploy/static/mandatory.yaml
user:~$ kubectl apply -f https://raw.githubusercontent.com/kubernetes/ingress-nginx/nginx-0.27.1/deploy/static/provider/cloud-generic.yaml
user:~$ kubectl patch svc ingress-nginx -n ingress-nginx -p '{"spec": {"type": "LoadBalancer", "externalIPs":["192.168.0.101"]}}'

# Installing Cert-Manager
user:~$ kubectl create namespace cert-manager
user:~$ kubectl apply --validate=false -f https://github.com/jetstack/cert-manager/releases/download/v0.13.0/cert-manager.yaml
user:~$ cat >> staging_issuer.yaml <<EOF
apiVersion: cert-manager.io/v1alpha2
kind: ClusterIssuer
metadata:
 name: letsencrypt-staging
 namespace: cert-manager
spec:
 acme:
  # The ACME server URL
  server: https://acme-staging-v02.api.letsencrypt.org/directory
  # Email address used for ACME registration
  email: your_email_address_here
  # Name of a secret used to store the ACME account private key
  privateKeySecretRef:
   name: letsencrypt-staging
  # Enable the HTTP-01 challenge provider
  solvers:
  - http01:
     ingress:
       class:  nginx
EOF
user:~$ kubectl create -f staging_issuer.yaml


###########################################################################
###                               Kubeflow                              ###
###########################################################################
* Kubeflow Install --------------------------------------------------------
user:~$ wget https://github.com/kubeflow/kfctl/releases/download/v1.0.2/kfctl_v1.0.2-0-ga476281_linux.tar.gz
user:~$ tar xfv kfctl_v1.0.2-0-ga476281_linux.tar.gz
user:~$ sudo mv kfctl /usr/local/bin/
user:~$ export KF_NAME=kubeflow
user:~$ export BASE_DIR=/opt
user:~$ export KF_DIR=${BASE_DIR}/${KF_NAME}
user:~$ export CONFIG_URI="https://raw.githubusercontent.com/kubeflow/manifests/v1.0-branch/kfdef/kfctl_k8s_istio.v1.0.2.yaml"
user:~$ sudo mkdir -p ${KF_DIR}
user:~$ sudo chown $USER.$GROUP ${KF_DIR}
user:~$ cd ${KF_DIR}
user:~$ kfctl apply -V -f ${CONFIG_URI}
user:~$ kubectl get all -n kubeflow

* Delete Kubeflow ---------------------------------------------------------
user:~$ export CONFIG_FILE=${KF_DIR}/kfctl_k8s_istio.0.7.1.yaml
user:~$ cd ${KF_DIR}
user:~$ kfctl delete -f ${CONFIG_FILE}



