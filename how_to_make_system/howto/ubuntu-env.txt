###########################################################################
# Error Fix
* Linux Mint 19.1 gconf2 error when upgrade all
user:~$ sudo dpkg --configure -a
user:~$ sudo apt-get --fix-broken install
user:~$ sudo apt-get remove --purge gconf2 && sudo apt-get install gconf2


###########################################################################
# Drivers
user:~$ sudo add-apt-repository ppa:bluetooth/bluez


###########################################################################
# X11 Forwarding
root# vi /etc/ssh/sshd_config
      X11Forwarding yes
      X11DisplayOffset 10
      X11UseLocalhost no
      
      PrintMotd no
      PrintLastLog yes
      TCPKeepAlive yes
      UseLogin no
root# systemctl restart sshd

# At Windows
1. Xming Install
2. putty
   * SSH > X11 > Enable X11 forwarding (check)
   * X display location : localhost:0.0


###########################################################################
# Virtualbox 6
user# wget -q https://www.virtualbox.org/download/oracle_vbox_2016.asc -O- | sudo apt-key add -
user# echo "deb [arch=amd64] http://download.virtualbox.org/virtualbox/debian bionic contrib" | sudo tee /etc/apt/sources.list.d/virtualbox.list
user# sudo apt update
user# sudo apt install -y virtualbox-6.0


###########################################################################
# OBS Studio
user:~$ sudo add-apt-repository ppa:obsproject/obs-studio
user:~$ sudo apt install ffmpeg
user:~$ sudo apt update
user:~$ sudo apt install obs-studio

###########################################################################
# Kdenlive
user:~$ sudo add-apt-repository ppa:kdenlive/kdenlive-stable
user:~$ sudo apt update
user:~$ sudo apt install frei0r-plugins dvgrab recordmydesktop dvdauthor mkisofs vlc
user:~$ sudo apt install kdenlive


###########################################################################
# Memory Clean
* Check Memory
user:~$ sudo free -m

* Drop Cache
user:~$ sudo sysctl vm.drop_caches=3


###########################################################################
###                         Kubernetest Install                         ###
###########################################################################
# Network Config : netPlan
root:~$ vi /etc/netplan/01-netcfg.yaml
network:
  version: 2
  renderer: networkd
  ethernets:
    enp0s3:
      dhcp4: no
      dhcp6: no
      addresses: [10.10.1.101/24]
      gateway4: 10.10.1.1
      nameservers:
        addresses: [8.8.8.8, 8.8.4.4]
root:~$ netplan apply


###########################################################################
# Docker Install Ubuntu
# kubeflow 1.0 >> docker-ce-18.09.8 : Kubernetes 1.15
# change version : sudo aptitude install docker-ce=5:18.09.9~3-0~ubuntu-bionic docker-ce-cli=5:18.09.9~3-0~ubuntu-bionic
user:~$ sudo apt install apt-transport-https ca-certificates curl software-properties-common
user:~$ curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -
user:~$ sudo add-apt-repository "deb [arch=amd64] https://download.docker.com/linux/ubuntu bionic stable"
#user:~? sudo echo -e "\ndeb [arch=amd64] https://download.docker.com/linux/ubuntu bionic stable" | sudo tee -a /etc/apt/sources.list
user:~$ sudo apt update
user:~$ sudo apt install -y docker-ce=5:18.09.9~3-0~ubuntu-bionic docker-ce-cli=5:18.09.9~3-0~ubuntu-bionic containerd.io=1.2.10-3
user:~$ sudo apt-mark hold docker-ce docker-ce-cli
user:~$ sudo usermod -aG docker $USER

# Update swap & sysctl settings for Kubernetes networking ------------------------
root# swapoff -a
root# sed -i '/swap/d' /etc/fstab
root# cat >>/etc/sysctl.d/kubernetes.conf<<EOF
net.bridge.bridge-nf-call-iptables  = 1
net.ipv4.ip_forward                 = 1
net.bridge.bridge-nf-call-ip6tables = 1
EOF
root# sysctl --system

# Setup daemon
root# cat > /etc/docker/daemon.json <<EOF
{
  "exec-opts": ["native.cgroupdriver=systemd"],
  "log-driver": "json-file",
  "log-opts": {
    "max-size": "100m"
  },
  "storage-driver": "overlay2"
}
EOF
root# mkdir -p /etc/systemd/system/docker.service.d
root# systemctl daemon-reload
root# systemctl restart docker

###########################################################################
# Kubernetes Install Ubuntu
# change version : sudo aptitude install kubelet=1.15.7-00 kubeadm=1.15.7-00 kubectl=1.15.7-00
root:~$ curl -s https://packages.cloud.google.com/apt/doc/apt-key.gpg | apt-key add -
#root:~$ apt-add-repository "deb http://apt.kubernetes.io/ kubernetes-xenial main"
root:~$ cat <<EOF > /etc/apt/sources.list.d/kubernetes.list
deb http://apt.kubernetes.io/ kubernetes-xenial main
EOF
root:~$ apt update
root:~$ apt install -y kubelet=1.15.7-00 kubeadm=1.15.7-00 kubectl=1.15.7-00
root:~$ apt-mark hold kubelet kubeadm kubectl

###########################################################################
# Setting Up Kubernetes Master
user:~$ sudo kubeadm init --apiserver-advertise-address=10.10.1.101 --pod-network-cidr=10.10.0.0/16
user:~$ mkdir ~/.kube
user:~$ sudo cp /etc/kubernetes/admin.conf ~/.kube/config
user:~$ sudo chown -R user.user ~/.kube
user:~$ kubectl create -f https://docs.projectcalico.org/v3.11/manifests/calico.yaml
user:~$ kubeadm token create --print-join-command

# Change Worker Node Host Name
user:~$ sudo hostnamectl set-hostname "K8Node01"

###########################################################################
# Install GPU NODE (https://github.com/NVIDIA/k8s-device-plugin)
* At Master Node
user:~$ kubectl create -f https://raw.githubusercontent.com/NVIDIA/k8s-device-plugin/1.0.0-beta4/nvidia-device-plugin.yml
user:~$ kubectl get nodes -o=custom-columns=NAME:.metadata.name,GPUs:.status.capacity.'nvidia\.com/gpu'

* using gpu example:
apiVersion: v1
kind: Pod
metadata:
  name: gpu-pod
spec:
  containers:
    - name: cuda-container
      image: nvidia/cuda:9.0-devel
      resources:
        limits:
          nvidia.com/gpu: 2 # requesting 2 GPUs
    - name: digits-container
      image: nvidia/digits:6.0
      resources:
        limits:
          nvidia.com/gpu: 2 # requesting 2 GPUs

###########################################################################
# Install ksonnet
user:~$ sudo apt install -y wget
user:~$ wget https://github.com/ksonnet/ksonnet/releases/download/v0.13.1/ks_0.13.1_linux_amd64.tar.gz
user:~$ tar xfvz ks_0.13.1_linux_amd64.tar.gz
user:~$ sudo mv ks_0.13.1_linux_amd64 /opt/
user:~$ sudo ln -s /opt/ks_0.13.1_linux_amd64/ks /usr/local/bin/ks

###########################################################################
# Install helm
user:~$ wget https://get.helm.sh/helm-v3.0.2-linux-amd64.tar.gz
user:~$ tar xfvz helm-v3.0.2-linux-amd64.tar.gz
user:~$ sudo mv linux-amd64/ /opt/helm
user:~$ sudo ln -s /opt/helm/helm /usr/local/bin/helm


